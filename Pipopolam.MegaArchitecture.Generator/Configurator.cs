using System.Collections.Generic;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace Pipopolam.MegaArchitecture.Generator
{
    [Generator]
    public class Configurator : ISourceGenerator
    {
        public void Initialize(GeneratorInitializationContext context)
        {
            context.RegisterForSyntaxNotifications(() => new ConfiguratorSyntaxReceiver());
        }

        public void Execute(GeneratorExecutionContext context)
        {
            ConfiguratorSyntaxReceiver receiver = (ConfiguratorSyntaxReceiver)context.SyntaxReceiver;

            List<(ITypeSymbol, AttributeData)> types = new List<(ITypeSymbol, AttributeData)>();
            foreach (ClassDeclarationSyntax classDeclaration in receiver.Candidates)
            {
                SemanticModel model = context.Compilation.GetSemanticModel(classDeclaration.SyntaxTree, true);
                ITypeSymbol type = model.GetDeclaredSymbol(classDeclaration) as ITypeSymbol;

                if (type is null)
                    continue;

                AttributeData attribute = GetAttribute(type);
                if (attribute == null)
                    continue;

                types.Add((type, attribute));
            }

            string code = GenerateCode(types);
            context.AddSource($"Registrator_Generated.cs", code);
        }

        public static AttributeData GetAttribute(ITypeSymbol type)
        {
            return type.GetAttributes()
                       .FirstOrDefault(a => a.AttributeClass?.ToString() == "Pipopolam.MegaArchitecture.Configuration.ResolverContainerAttribute");
        }

        public static string GenerateCode(List<(ITypeSymbol, AttributeData)> types)
        {
            string resolver(ITypeSymbol type, AttributeData attribute)
            {
                return $@"          {{
                IResolverContainer resolverContainer = Container.Resolve<{type.Name}>();
                resolverContainer.Register();
                Container.RegisterSingleton(typeof(IResolver), resolverContainer.GetResolver(), typeof({attribute.ConstructorArguments.First().Value}).FullName);
            }}";
            }

            return @$"// <auto-generated />

using System.Collections.Generic;
using Unity;

namespace Pipopolam.MegaArchitecture.Configuration
{{
   partial class Registrator
   {{
        private partial void RegisterResolvers()
        {{
{string.Join("\n", types.Select(x => resolver(x.Item1, x.Item2)))}
        }}
   }}
}}
";
        }
    }
}
